
magneto_motors1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002dc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000008f  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000261  00000000  00000000  000003df  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000018f  00000000  00000000  00000640  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000042a  00000000  00000000  000007cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000000a0  00000000  00000000  00000bfc  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000014e  00000000  00000000  00000c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000094  00000000  00000000  00000dea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	8f c0       	rjmp	.+286    	; 0x126 <__vector_3>
   8:	80 c0       	rjmp	.+256    	; 0x10a <__vector_4>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	84 d0       	rcall	.+264    	; 0x13c <main>
  34:	51 c1       	rjmp	.+674    	; 0x2d8 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <uart_read>:
	uart_char(O+48);	
}
 
unsigned char uart_read()
{
	while((UCSRA&0x80)==0x00);
  38:	5f 9b       	sbis	0x0b, 7	; 11
  3a:	fe cf       	rjmp	.-4      	; 0x38 <uart_read>
	return UDR;
  3c:	8c b1       	in	r24, 0x0c	; 12
}
  3e:	08 95       	ret

00000040 <uart_delay>:
 
void uart_delay(unsigned int delaytime)
{
  40:	20 e0       	ldi	r18, 0x00	; 0
  42:	30 e0       	ldi	r19, 0x00	; 0
	...
	unsigned int dc;
	for(dc=0;dc<=delaytime;dc++)
  58:	2f 5f       	subi	r18, 0xFF	; 255
  5a:	3f 4f       	sbci	r19, 0xFF	; 255
  5c:	82 17       	cp	r24, r18
  5e:	93 07       	cpc	r25, r19
  60:	88 f7       	brcc	.-30     	; 0x44 <uart_delay+0x4>
	{
		asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
		asm("nop");asm("nop");asm("nop");asm("nop");
	}
}
  62:	08 95       	ret

00000064 <uart_string>:
	while((UCSRA&0x40)==0x00);
	uart_delay(1000);
}
 
void uart_string(const unsigned char *ustring)
{
  64:	cf 93       	push	r28
  66:	df 93       	push	r29
  68:	ec 01       	movw	r28, r24
  6a:	07 c0       	rjmp	.+14     	; 0x7a <uart_string+0x16>
	while ( *ustring )
	{
		UDR=*ustring++;
  6c:	8c b9       	out	0x0c, r24	; 12
		while((UCSRA&0x40)==0x00);
  6e:	5e 9b       	sbis	0x0b, 6	; 11
  70:	fe cf       	rjmp	.-4      	; 0x6e <uart_string+0xa>
 
void uart_string(const unsigned char *ustring)
{
	while ( *ustring )
	{
		UDR=*ustring++;
  72:	21 96       	adiw	r28, 0x01	; 1
		while((UCSRA&0x40)==0x00);
		uart_delay(1000);
  74:	88 ee       	ldi	r24, 0xE8	; 232
  76:	93 e0       	ldi	r25, 0x03	; 3
  78:	e3 df       	rcall	.-58     	; 0x40 <uart_delay>
	uart_delay(1000);
}
 
void uart_string(const unsigned char *ustring)
{
	while ( *ustring )
  7a:	88 81       	ld	r24, Y
  7c:	88 23       	and	r24, r24
  7e:	b1 f7       	brne	.-20     	; 0x6c <uart_string+0x8>
	{
		UDR=*ustring++;
		while((UCSRA&0x40)==0x00);
		uart_delay(1000);
	}
}
  80:	df 91       	pop	r29
  82:	cf 91       	pop	r28
  84:	08 95       	ret

00000086 <uart_char>:
	uart_delay(100);
}

void uart_char(unsigned char uchar)
{
	UDR=uchar;
  86:	8c b9       	out	0x0c, r24	; 12
	while((UCSRA&0x40)==0x00);
  88:	5e 9b       	sbis	0x0b, 6	; 11
  8a:	fe cf       	rjmp	.-4      	; 0x88 <uart_char+0x2>
	uart_delay(1000);
  8c:	88 ee       	ldi	r24, 0xE8	; 232
  8e:	93 e0       	ldi	r25, 0x03	; 3
  90:	d7 df       	rcall	.-82     	; 0x40 <uart_delay>
}
  92:	08 95       	ret

00000094 <uart_num>:
		uart_delay(1000);
	}
}
 
void uart_num(unsigned char num)
{
  94:	ef 92       	push	r14
  96:	ff 92       	push	r15
  98:	0f 93       	push	r16
  9a:	1f 93       	push	r17
  9c:	18 2f       	mov	r17, r24
    unsigned char H=0,T=0,O=0;
	H=num/100;
  9e:	64 e6       	ldi	r22, 0x64	; 100
  a0:	e8 d0       	rcall	.+464    	; 0x272 <__udivmodqi4>
  a2:	48 2f       	mov	r20, r24
	T=(num - (H*100))/10;
  a4:	28 2f       	mov	r18, r24
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	8c e9       	ldi	r24, 0x9C	; 156
  aa:	9f ef       	ldi	r25, 0xFF	; 255
  ac:	28 9f       	mul	r18, r24
  ae:	70 01       	movw	r14, r0
  b0:	29 9f       	mul	r18, r25
  b2:	f0 0c       	add	r15, r0
  b4:	38 9f       	mul	r19, r24
  b6:	f0 0c       	add	r15, r0
  b8:	11 24       	eor	r1, r1
  ba:	c7 01       	movw	r24, r14
  bc:	81 0f       	add	r24, r17
  be:	91 1d       	adc	r25, r1
  c0:	6a e0       	ldi	r22, 0x0A	; 10
  c2:	70 e0       	ldi	r23, 0x00	; 0
  c4:	e2 d0       	rcall	.+452    	; 0x28a <__divmodhi4>
  c6:	06 2f       	mov	r16, r22
	O=(num - (H*100) - (T*10));
	
	uart_char(H+48);
  c8:	84 2f       	mov	r24, r20
  ca:	80 5d       	subi	r24, 0xD0	; 208
  cc:	dc df       	rcall	.-72     	; 0x86 <uart_char>
	uart_char(T+48);
  ce:	80 2f       	mov	r24, r16
  d0:	80 5d       	subi	r24, 0xD0	; 208
  d2:	d9 df       	rcall	.-78     	; 0x86 <uart_char>
	uart_char(O+48);	
  d4:	10 5d       	subi	r17, 0xD0	; 208
  d6:	1e 0d       	add	r17, r14
  d8:	86 ef       	ldi	r24, 0xF6	; 246
  da:	9f ef       	ldi	r25, 0xFF	; 255
  dc:	08 9f       	mul	r16, r24
  de:	00 2d       	mov	r16, r0
  e0:	11 24       	eor	r1, r1
  e2:	80 2f       	mov	r24, r16
  e4:	81 0f       	add	r24, r17
  e6:	cf df       	rcall	.-98     	; 0x86 <uart_char>
}
  e8:	1f 91       	pop	r17
  ea:	0f 91       	pop	r16
  ec:	ff 90       	pop	r15
  ee:	ef 90       	pop	r14
  f0:	08 95       	ret

000000f2 <uart_init>:
#ifndef _UART_H_
#define _UART_H_

void uart_init()
{
	UCSRA=0x00;
  f2:	1b b8       	out	0x0b, r1	; 11
	UCSRB=0x18;
  f4:	88 e1       	ldi	r24, 0x18	; 24
  f6:	8a b9       	out	0x0a, r24	; 10
	UCSRC=0x86;
  f8:	86 e8       	ldi	r24, 0x86	; 134
  fa:	80 bd       	out	0x20, r24	; 32
	UBRRH=0x00;
  fc:	10 bc       	out	0x20, r1	; 32
	UBRRL=0x4D;
  fe:	8d e4       	ldi	r24, 0x4D	; 77
 100:	89 b9       	out	0x09, r24	; 9
	uart_delay(100);
 102:	84 e6       	ldi	r24, 0x64	; 100
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	9c df       	rcall	.-200    	; 0x40 <uart_delay>
}
 108:	08 95       	ret

0000010a <__vector_4>:

#define F_CPU 12000000  
#define USART_BAUDRATE 9600                               // SERIAL Communication @ 9600 baud
#define BAUD_PRESCALE (((F_CPU / (USART_BAUDRATE * 16UL))) - 1) 
ISR (TIMER2_OVF_vect)				                      // Subroutine of Timer2 overflow interrupt
{
 10a:	1f 92       	push	r1
 10c:	0f 92       	push	r0
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	0f 92       	push	r0
 112:	11 24       	eor	r1, r1
 114:	8f 93       	push	r24

	PORTB=0b00001001; 
 116:	89 e0       	ldi	r24, 0x09	; 9
 118:	88 bb       	out	0x18, r24	; 24
	
}
 11a:	8f 91       	pop	r24
 11c:	0f 90       	pop	r0
 11e:	0f be       	out	0x3f, r0	; 63
 120:	0f 90       	pop	r0
 122:	1f 90       	pop	r1
 124:	18 95       	reti

00000126 <__vector_3>:
ISR (TIMER2_COMP_vect)				                      // Subroutine of Timer2 compare match interrupt
{
 126:	1f 92       	push	r1
 128:	0f 92       	push	r0
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	0f 92       	push	r0
 12e:	11 24       	eor	r1, r1
	PORTB=0b00000000;
 130:	18 ba       	out	0x18, r1	; 24
}
 132:	0f 90       	pop	r0
 134:	0f be       	out	0x3f, r0	; 63
 136:	0f 90       	pop	r0
 138:	1f 90       	pop	r1
 13a:	18 95       	reti

0000013c <main>:

void main()
{
 13c:	1f 93       	push	r17
      uart_init();
 13e:	d9 df       	rcall	.-78     	; 0xf2 <uart_init>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 140:	88 ea       	ldi	r24, 0xA8	; 168
 142:	91 e6       	ldi	r25, 0x61	; 97
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <main+0x8>

	  _delay_ms(100);
      TCCR1A =(1<<COM1A1)|(1<<COM1B1)|(1<<WGM10);         // 8-bit Fast PWM  mode 
 148:	81 ea       	ldi	r24, 0xA1	; 161
 14a:	8f bd       	out	0x2f, r24	; 47
      TCCR1B =(1<<WGM12)|(1<<CS10) ;
 14c:	89 e0       	ldi	r24, 0x09	; 9
 14e:	8e bd       	out	0x2e, r24	; 46
	  TCNT1=0x00; 
 150:	1d bc       	out	0x2d, r1	; 45
 152:	1c bc       	out	0x2c, r1	; 44
	  TIMSK=0xC0;					                      // This is for interrupt enable for timer0.
 154:	80 ec       	ldi	r24, 0xC0	; 192
 156:	89 bf       	out	0x39, r24	; 57
	  TCCR2=0x4C;						                  // This is for timer2 initialization.,fAST pwM ,prescalar 64
 158:	8c e4       	ldi	r24, 0x4C	; 76
 15a:	85 bd       	out	0x25, r24	; 37
   	  
	  sei();  
 15c:	78 94       	sei
	  TCNT2=0x00;                                    // No Prescaling
 15e:	14 bc       	out	0x24, r1	; 36
	  
	     
	 

      DDRB=0b00001111;
 160:	8f e0       	ldi	r24, 0x0F	; 15
 162:	87 bb       	out	0x17, r24	; 23
	    OCR1A=192;
		OCR1B=192;	
		break;
      case '9':
	     OCR2=0;                      //correctn
	    OCR1A=255;
 164:	ef ef       	ldi	r30, 0xFF	; 255
 166:	f0 e0       	ldi	r31, 0x00	; 0
	    OCR1A=64;
		OCR1B=0;	
		break;
	  case 'q':
	    OCR2=0;                      //correctn
	    OCR1A=128;
 168:	60 e8       	ldi	r22, 0x80	; 128
 16a:	70 e0       	ldi	r23, 0x00	; 0
		OCR1B=0;	
		break;	
	  case 'r':
	    OCR2=0;                      //correctn
	    OCR1A=192;
 16c:	40 ec       	ldi	r20, 0xC0	; 192
 16e:	50 e0       	ldi	r21, 0x00	; 0
		break;	
		
		
   	  case 'p':
	    OCR2=0;                      //correctn
	    OCR1A=64;
 170:	20 e4       	ldi	r18, 0x40	; 64
 172:	30 e0       	ldi	r19, 0x00	; 0
	  break;	
	  case '3':
	  OCR2=192;
	  break;
	  case '4':
	  OCR2=255;
 174:	1f ef       	ldi	r17, 0xFF	; 255
	  
   	  case '1':
	  OCR2=64;
	  break;
	  case '2':
	  OCR2=128;
 176:	b0 e8       	ldi	r27, 0x80	; 128
	  break;	
	  case '3':
	  OCR2=192;
 178:	90 ec       	ldi	r25, 0xC0	; 192
	    OCR1A=255;
		OCR1B=0;	
		break;	
	  
   	  case '1':
	  OCR2=64;
 17a:	a0 e4       	ldi	r26, 0x40	; 64
	uart_char(O+48);	
}
 
unsigned char uart_read()
{
	while((UCSRA&0x80)==0x00);
 17c:	5f 9b       	sbis	0x0b, 7	; 11
 17e:	fe cf       	rjmp	.-4      	; 0x17c <main+0x40>
	return UDR;
 180:	8c b1       	in	r24, 0x0c	; 12
      {
	    
	
       unsigned char data;
	    data=uart_read();			                 //read a charactor from UART
	  switch (data)
 182:	89 33       	cpi	r24, 0x39	; 57
 184:	e1 f1       	breq	.+120    	; 0x1fe <main+0xc2>
 186:	8a 33       	cpi	r24, 0x3A	; 58
 188:	b8 f4       	brcc	.+46     	; 0x1b8 <main+0x7c>
 18a:	84 33       	cpi	r24, 0x34	; 52
 18c:	09 f4       	brne	.+2      	; 0x190 <main+0x54>
 18e:	6f c0       	rjmp	.+222    	; 0x26e <main+0x132>
 190:	85 33       	cpi	r24, 0x35	; 53
 192:	48 f4       	brcc	.+18     	; 0x1a6 <main+0x6a>
 194:	82 33       	cpi	r24, 0x32	; 50
 196:	09 f4       	brne	.+2      	; 0x19a <main+0x5e>
 198:	66 c0       	rjmp	.+204    	; 0x266 <main+0x12a>
 19a:	83 33       	cpi	r24, 0x33	; 51
 19c:	08 f0       	brcs	.+2      	; 0x1a0 <main+0x64>
 19e:	65 c0       	rjmp	.+202    	; 0x26a <main+0x12e>
 1a0:	81 33       	cpi	r24, 0x31	; 49
 1a2:	61 f7       	brne	.-40     	; 0x17c <main+0x40>
 1a4:	5e c0       	rjmp	.+188    	; 0x262 <main+0x126>
 1a6:	86 33       	cpi	r24, 0x36	; 54
 1a8:	f1 f0       	breq	.+60     	; 0x1e6 <main+0xaa>
 1aa:	86 33       	cpi	r24, 0x36	; 54
 1ac:	60 f1       	brcs	.+88     	; 0x206 <main+0xca>
 1ae:	87 33       	cpi	r24, 0x37	; 55
 1b0:	f1 f0       	breq	.+60     	; 0x1ee <main+0xb2>
 1b2:	88 33       	cpi	r24, 0x38	; 56
 1b4:	19 f7       	brne	.-58     	; 0x17c <main+0x40>
 1b6:	1f c0       	rjmp	.+62     	; 0x1f6 <main+0xba>
 1b8:	84 36       	cpi	r24, 0x64	; 100
 1ba:	d9 f1       	breq	.+118    	; 0x232 <main+0xf6>
 1bc:	85 36       	cpi	r24, 0x65	; 101
 1be:	38 f4       	brcc	.+14     	; 0x1ce <main+0x92>
 1c0:	82 36       	cpi	r24, 0x62	; 98
 1c2:	59 f1       	breq	.+86     	; 0x21a <main+0xde>
 1c4:	83 36       	cpi	r24, 0x63	; 99
 1c6:	78 f5       	brcc	.+94     	; 0x226 <main+0xea>
 1c8:	81 36       	cpi	r24, 0x61	; 97
 1ca:	c1 f6       	brne	.-80     	; 0x17c <main+0x40>
 1cc:	20 c0       	rjmp	.+64     	; 0x20e <main+0xd2>
 1ce:	81 37       	cpi	r24, 0x71	; 113
 1d0:	d1 f1       	breq	.+116    	; 0x246 <main+0x10a>
 1d2:	82 37       	cpi	r24, 0x72	; 114
 1d4:	18 f4       	brcc	.+6      	; 0x1dc <main+0xa0>
 1d6:	80 37       	cpi	r24, 0x70	; 112
 1d8:	89 f6       	brne	.-94     	; 0x17c <main+0x40>
 1da:	31 c0       	rjmp	.+98     	; 0x23e <main+0x102>
 1dc:	82 37       	cpi	r24, 0x72	; 114
 1de:	b9 f1       	breq	.+110    	; 0x24e <main+0x112>
 1e0:	83 37       	cpi	r24, 0x73	; 115
 1e2:	61 f6       	brne	.-104    	; 0x17c <main+0x40>
 1e4:	38 c0       	rjmp	.+112    	; 0x256 <main+0x11a>
	  {
	  case '6':	
	  	OCR2=0;                      //correctn		
 1e6:	13 bc       	out	0x23, r1	; 35
	    OCR1A=64;
 1e8:	3b bd       	out	0x2b, r19	; 43
 1ea:	2a bd       	out	0x2a, r18	; 42
 1ec:	13 c0       	rjmp	.+38     	; 0x214 <main+0xd8>
		OCR1B=64;				
	    break; 
	  case '7':
	  	OCR2=0;                      //correctn				
 1ee:	13 bc       	out	0x23, r1	; 35
	    OCR1A=128;
 1f0:	7b bd       	out	0x2b, r23	; 43
 1f2:	6a bd       	out	0x2a, r22	; 42
 1f4:	15 c0       	rjmp	.+42     	; 0x220 <main+0xe4>
		OCR1B=128;
		break;
	  case '8':
	    OCR2=0;                      //correctn
 1f6:	13 bc       	out	0x23, r1	; 35
	    OCR1A=192;
 1f8:	5b bd       	out	0x2b, r21	; 43
 1fa:	4a bd       	out	0x2a, r20	; 42
 1fc:	17 c0       	rjmp	.+46     	; 0x22c <main+0xf0>
		OCR1B=192;	
		break;
      case '9':
	     OCR2=0;                      //correctn
 1fe:	13 bc       	out	0x23, r1	; 35
	    OCR1A=255;
 200:	fb bd       	out	0x2b, r31	; 43
 202:	ea bd       	out	0x2a, r30	; 42
 204:	19 c0       	rjmp	.+50     	; 0x238 <main+0xfc>
		OCR1B=255;	
		break;
	  case '5':
	     OCR2=0;                      //correctn
 206:	13 bc       	out	0x23, r1	; 35
	    OCR1A=0;
 208:	1b bc       	out	0x2b, r1	; 43
 20a:	1a bc       	out	0x2a, r1	; 42
 20c:	27 c0       	rjmp	.+78     	; 0x25c <main+0x120>
		OCR1B=0;	
		break;	

   	  case 'a':
	    OCR2=0;                      //correctn
 20e:	13 bc       	out	0x23, r1	; 35
	    OCR1A=0;
 210:	1b bc       	out	0x2b, r1	; 43
 212:	1a bc       	out	0x2a, r1	; 42
		OCR1B=64;	
 214:	39 bd       	out	0x29, r19	; 41
 216:	28 bd       	out	0x28, r18	; 40
 218:	b1 cf       	rjmp	.-158    	; 0x17c <main+0x40>
		break;
	  case 'b':
	    OCR2=0;                      //correctn
 21a:	13 bc       	out	0x23, r1	; 35
	    OCR1A=0;
 21c:	1b bc       	out	0x2b, r1	; 43
 21e:	1a bc       	out	0x2a, r1	; 42
		OCR1B=128;	
 220:	79 bd       	out	0x29, r23	; 41
 222:	68 bd       	out	0x28, r22	; 40
 224:	ab cf       	rjmp	.-170    	; 0x17c <main+0x40>
		break;	
	  case 'c':
	    OCR2=0;                      //correctn
 226:	13 bc       	out	0x23, r1	; 35
	    OCR1A=0;
 228:	1b bc       	out	0x2b, r1	; 43
 22a:	1a bc       	out	0x2a, r1	; 42
		OCR1B=192;	
 22c:	59 bd       	out	0x29, r21	; 41
 22e:	48 bd       	out	0x28, r20	; 40
 230:	a5 cf       	rjmp	.-182    	; 0x17c <main+0x40>
		break;
	  case 'd':
	    OCR2=0;                      //correctn
 232:	13 bc       	out	0x23, r1	; 35
	    OCR1A=0;
 234:	1b bc       	out	0x2b, r1	; 43
 236:	1a bc       	out	0x2a, r1	; 42
		OCR1B=255;	
 238:	f9 bd       	out	0x29, r31	; 41
 23a:	e8 bd       	out	0x28, r30	; 40
 23c:	9f cf       	rjmp	.-194    	; 0x17c <main+0x40>
		break;	
		
		
   	  case 'p':
	    OCR2=0;                      //correctn
 23e:	13 bc       	out	0x23, r1	; 35
	    OCR1A=64;
 240:	3b bd       	out	0x2b, r19	; 43
 242:	2a bd       	out	0x2a, r18	; 42
 244:	0b c0       	rjmp	.+22     	; 0x25c <main+0x120>
		OCR1B=0;	
		break;
	  case 'q':
	    OCR2=0;                      //correctn
 246:	13 bc       	out	0x23, r1	; 35
	    OCR1A=128;
 248:	7b bd       	out	0x2b, r23	; 43
 24a:	6a bd       	out	0x2a, r22	; 42
 24c:	07 c0       	rjmp	.+14     	; 0x25c <main+0x120>
		OCR1B=0;	
		break;	
	  case 'r':
	    OCR2=0;                      //correctn
 24e:	13 bc       	out	0x23, r1	; 35
	    OCR1A=192;
 250:	5b bd       	out	0x2b, r21	; 43
 252:	4a bd       	out	0x2a, r20	; 42
 254:	03 c0       	rjmp	.+6      	; 0x25c <main+0x120>
		OCR1B=0;	
		break;
	  case 's':
	    OCR2=0;                      //correctn
 256:	13 bc       	out	0x23, r1	; 35
	    OCR1A=255;
 258:	fb bd       	out	0x2b, r31	; 43
 25a:	ea bd       	out	0x2a, r30	; 42
		OCR1B=0;	
 25c:	19 bc       	out	0x29, r1	; 41
 25e:	18 bc       	out	0x28, r1	; 40
 260:	8d cf       	rjmp	.-230    	; 0x17c <main+0x40>
		break;	
	  
   	  case '1':
	  OCR2=64;
 262:	a3 bd       	out	0x23, r26	; 35
 264:	8b cf       	rjmp	.-234    	; 0x17c <main+0x40>
	  break;
	  case '2':
	  OCR2=128;
 266:	b3 bd       	out	0x23, r27	; 35
 268:	89 cf       	rjmp	.-238    	; 0x17c <main+0x40>
	  break;	
	  case '3':
	  OCR2=192;
 26a:	93 bd       	out	0x23, r25	; 35
 26c:	87 cf       	rjmp	.-242    	; 0x17c <main+0x40>
	  break;
	  case '4':
	  OCR2=255;
 26e:	13 bd       	out	0x23, r17	; 35
 270:	85 cf       	rjmp	.-246    	; 0x17c <main+0x40>

00000272 <__udivmodqi4>:
 272:	99 1b       	sub	r25, r25
 274:	79 e0       	ldi	r23, 0x09	; 9
 276:	04 c0       	rjmp	.+8      	; 0x280 <__udivmodqi4_ep>

00000278 <__udivmodqi4_loop>:
 278:	99 1f       	adc	r25, r25
 27a:	96 17       	cp	r25, r22
 27c:	08 f0       	brcs	.+2      	; 0x280 <__udivmodqi4_ep>
 27e:	96 1b       	sub	r25, r22

00000280 <__udivmodqi4_ep>:
 280:	88 1f       	adc	r24, r24
 282:	7a 95       	dec	r23
 284:	c9 f7       	brne	.-14     	; 0x278 <__udivmodqi4_loop>
 286:	80 95       	com	r24
 288:	08 95       	ret

0000028a <__divmodhi4>:
 28a:	97 fb       	bst	r25, 7
 28c:	09 2e       	mov	r0, r25
 28e:	07 26       	eor	r0, r23
 290:	0a d0       	rcall	.+20     	; 0x2a6 <__divmodhi4_neg1>
 292:	77 fd       	sbrc	r23, 7
 294:	04 d0       	rcall	.+8      	; 0x29e <__divmodhi4_neg2>
 296:	0c d0       	rcall	.+24     	; 0x2b0 <__udivmodhi4>
 298:	06 d0       	rcall	.+12     	; 0x2a6 <__divmodhi4_neg1>
 29a:	00 20       	and	r0, r0
 29c:	1a f4       	brpl	.+6      	; 0x2a4 <__divmodhi4_exit>

0000029e <__divmodhi4_neg2>:
 29e:	70 95       	com	r23
 2a0:	61 95       	neg	r22
 2a2:	7f 4f       	sbci	r23, 0xFF	; 255

000002a4 <__divmodhi4_exit>:
 2a4:	08 95       	ret

000002a6 <__divmodhi4_neg1>:
 2a6:	f6 f7       	brtc	.-4      	; 0x2a4 <__divmodhi4_exit>
 2a8:	90 95       	com	r25
 2aa:	81 95       	neg	r24
 2ac:	9f 4f       	sbci	r25, 0xFF	; 255
 2ae:	08 95       	ret

000002b0 <__udivmodhi4>:
 2b0:	aa 1b       	sub	r26, r26
 2b2:	bb 1b       	sub	r27, r27
 2b4:	51 e1       	ldi	r21, 0x11	; 17
 2b6:	07 c0       	rjmp	.+14     	; 0x2c6 <__udivmodhi4_ep>

000002b8 <__udivmodhi4_loop>:
 2b8:	aa 1f       	adc	r26, r26
 2ba:	bb 1f       	adc	r27, r27
 2bc:	a6 17       	cp	r26, r22
 2be:	b7 07       	cpc	r27, r23
 2c0:	10 f0       	brcs	.+4      	; 0x2c6 <__udivmodhi4_ep>
 2c2:	a6 1b       	sub	r26, r22
 2c4:	b7 0b       	sbc	r27, r23

000002c6 <__udivmodhi4_ep>:
 2c6:	88 1f       	adc	r24, r24
 2c8:	99 1f       	adc	r25, r25
 2ca:	5a 95       	dec	r21
 2cc:	a9 f7       	brne	.-22     	; 0x2b8 <__udivmodhi4_loop>
 2ce:	80 95       	com	r24
 2d0:	90 95       	com	r25
 2d2:	bc 01       	movw	r22, r24
 2d4:	cd 01       	movw	r24, r26
 2d6:	08 95       	ret

000002d8 <_exit>:
 2d8:	f8 94       	cli

000002da <__stop_program>:
 2da:	ff cf       	rjmp	.-2      	; 0x2da <__stop_program>
